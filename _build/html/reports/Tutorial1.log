Traceback (most recent call last):
  File "/home/panxopanza/s/miniconda3/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/panxopanza/s/miniconda3/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/panxopanza/s/miniconda3/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/panxopanza/s/miniconda3/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/home/panxopanza/s/miniconda3/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/home/panxopanza/s/miniconda3/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/home/panxopanza/s/miniconda3/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/panxopanza/s/miniconda3/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import iadpython as iad
import empylib.miescattering as mie
import empylib.nklib as nk
import numpy as np

# Solo modificar estos par√°metros
#---------------------------------------------------------------
lam = np.linspace(0.3,1.0,100) # espectro de longitudes de onda
tfilm = 100                    # espesor en mm
Nh = nk.SiO2(lam)              # indice de refracci√≥n del material con incrustaciones
fv = 0.6                       # fracci√≥n de vol√∫men de los poros
D = 1.0                        # di√°metro de los poros (micrones)
Np = np.ones(lam.shape)        # √≠ndice de refracci√≥n part√≠cula
#---------------------------------------------------------------

# determinamos par√°metros de eficiencia
qext, qsca, gcos = mie.scatter_efficiency(lam,Nh,Np,D)

# convertimos los resultados a secciones transversales
Ac = np.pi*D**2/4 # secci√≥n transversal de la part√≠cula
Csca = qsca*Ac
Cext = qext*Ac
Cabs = Cext - Csca
Vp = np.pi*D**3/6

# iteramos en iadpython
Rtot = np.zeros(lam.shape)
Ttot = np.zeros(lam.shape)
for i in range(len(lam)):
    kz_imag = 2*np.pi/lam[i]*Nh[i].imag  # parte imaginaria del vector de onda
    
    mu_s = fv*Csca[i]/Vp  
    mu_a = fv*Cabs[i]/Vp + 2*kz_imag
    g = gcos[i]
    d = tfilm

    a = mu_s/(mu_a+mu_s)
    b = mu_s/(mu_a+mu_s) * d

    # air / sample / air
    s = iad.Sample(a=a, b=b, g=g, n=Nh[i].real, n_above=1.0, n_below=1.0)
    ur1, ut1, uru, utu = s.rt()
    
    Rtot[i] = ur1
    Ttot[i] = ut1

plt.plot(lam,Rtot,'-r',label='R')
plt.plot(lam,Ttot,'-b',label='T')
plt.xlabel('Longitud de onda ($\mu$m)')
plt.ylabel('Reflectividad / Transmisividad')
plt.title(r'S√≠lice poroso (fv = 60% v/v)')
plt.legend()
plt.ylim(0,1)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Input [0;32mIn [12][0m, in [0;36m<cell line: 1>[0;34m()[0m
[0;32m----> 1[0m [38;5;28;01mimport[39;00m [38;5;21;01miadpython[39;00m [38;5;28;01mas[39;00m [38;5;21;01miad[39;00m
[1;32m      2[0m [38;5;28;01mimport[39;00m [38;5;21;01mempylib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mmiescattering[39;00m [38;5;28;01mas[39;00m [38;5;21;01mmie[39;00m
[1;32m      3[0m [38;5;28;01mimport[39;00m [38;5;21;01mempylib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mnklib[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnk[39;00m

[0;31mModuleNotFoundError[0m: No module named 'iadpython'
ModuleNotFoundError: No module named 'iadpython'

